name: Test
on:
  workflow_call:
    inputs:
      dotnet-framework-version:
        description: "Only needed for .NET Framework apps. Which version needed for build & test (eg: 4.6, 4.7.1)"
        required: false
        type: string
      
      filter:
        description: Filter to apply when running tests
        required: true
        type: string

      solution:
        description: Solution containing test projects
        required: false
        type: string

      ssm-parameter-paths:
        description: Paths to retrieve parameters by. Subsequent paths should be comma delimited
        required: false
        type: string

jobs:
  run:
    name: Run
    runs-on: ${{ fromJSON(inputs.dotnet-framework-version && '["self-hosted", "windows", "x64"]' || '"ubuntu-latest"') }}
    env:
      GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}
      GITHUB_USERNAME: GitHub
    steps:
      - uses: actions/checkout@v4

      - name: Add msbuild to PATH
        if: ${{ inputs.dotnet-framework-version }}  
        uses: microsoft/setup-msbuild@v2

      - name: Login to AWS
        if: ${{ inputs.ssm-parameter-paths }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OCKERS_BUILD_ROLE }}

      - name: Get Parameters
        if: ${{ inputs.ssm-parameter-paths }}
        id: ssm-parameter
        uses: orthofi/actions-aws-ssm-get-by-path@v1
        with:
          paths: ${{ inputs.ssm-parameter-paths }}
          save-to-environment: true
          recursive: true
          decrypt: true
          prefix: OFI__
          delimiter: __

      - name: Test (.NET Core)
        if: ${{ !inputs.dotnet-framework-version }}
        env:
          OFI__LAUNCH_DARKLY__SDK_KEY: ${{ secrets.LAUNCHDARKLY_DEV_SDK_KEY }}
        shell: pwsh
        run: |
          dotnet test ${{ inputs.solution }} -v q -c Release --nologo --filter ${{ inputs.filter }} --results-directory artifacts --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Test (.NET Framework)
        if: ${{ inputs.dotnet-framework-version}}
        env:
          OFI__LAUNCH_DARKLY__SDK_KEY: ${{ secrets.LAUNCHDARKLY_DEV_SDK_KEY }}
        shell: pwsh
        run: |
          Write-Host "######### Installing deps #########"  
          choco install dotnetcore-sdk -y

          Write-Host "######### Running nuget restore #########"
          nuget restore -verbosity quiet

          Write-Host "######### Running msbuild /clp:ErrorsOnly #########"
          msbuild /clp:ErrorsOnly

          Write-Host "######### Running dotnet test --no-build #########"
          dotnet test --no-build --logger "trx;LogFileName=TestResults.trx" --results-directory artifacts --verbosity minimal

          Write-Host "######### Summarizing Test Results #########"
          Import-Module 'Pester'
          $results = [xml](Get-Content artifacts\TestResults.trx)
          $failedTests = $results.TestRun.Results.UnitTestResult | Where-Object { $_.outcome -eq 'Failed' }
          if ($failedTests.Count -gt 0) {
              Write-Host "$($failedTests.Count) tests failed:"
              foreach ($test in $failedTests) {
                  Write-Host "$($test.testName): $($test.errorMessage)"
              }
              exit 1
          } 
          Write-Host "All tests passed."