name: Test
on:
  workflow_call:
    inputs:
      dotnet-framework-version:
        description: "Only needed for .NET Framework apps. Which version needed for build & test (eg: 4.6, 4.7.1)"
        required: false
        type: string
      
      filter:
        description: Filter to apply when running tests
        required: true
        type: string

      solution:
        description: Solution containing test projects
        required: false
        type: string

      ssm-parameter-paths:
        description: Paths to retrieve parameters by. Subsequent paths should be comma delimited
        required: false
        type: string

jobs:
  run:
    name: Run
    runs-on: ${{ fromJSON(inputs.dotnet-framework-version && '["self-hosted", "windows", "x64"]' || '"ubuntu-latest"') }}
    env:
      GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}
      GITHUB_USERNAME: GitHub
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Add msbuild to PATH
        if: ${{ inputs.dotnet-framework-version }}  
        uses: microsoft/setup-msbuild@v2

      - name: Login to AWS
        if: ${{ inputs.ssm-parameter-paths }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OCKERS_BUILD_ROLE }}

      - name: Get Parameters
        if: ${{ inputs.ssm-parameter-paths }}
        id: ssm-parameter
        uses: orthofi/actions-aws-ssm-get-by-path@v1
        with:
          paths: ${{ inputs.ssm-parameter-paths }}
          save-to-environment: true
          recursive: true
          decrypt: true
          prefix: OFI__
          delimiter: __

      - name: Test (.NET Core)
        if: ${{ !inputs.dotnet-framework-version }}
        env:
          OFI__LAUNCH_DARKLY__SDK_KEY: ${{ secrets.LAUNCHDARKLY_DEV_SDK_KEY }}
        shell: pwsh
        run: |
          dotnet test ${{ inputs.solution }} -c Release --nologo `
            --filter ${{ inputs.filter }} `
            --results-directory artifacts `
            --logger "html" `
            --logger "trx" `
            --collect:"XPlat Code Coverage" `
            --verbosity quiet

      - name: Publish Test Results (.NET Core)
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() && !inputs.dotnet-framework-version }}
        with:
          comment_mode: off
          files: |
            artifacts/*.trx
          job_summary: true

      - name: Test (.NET Framework)
        if: ${{ inputs.dotnet-framework-version}}
        env:
          OFI__LAUNCH_DARKLY__SDK_KEY: ${{ secrets.LAUNCHDARKLY_DEV_SDK_KEY }}
        shell: pwsh
        run: |
          choco install gzip -y
          Write-Host ""
          Write-Host "---------------------------------------------------------------------"
          Write-Host "nuget restore -verbosity quiet"
          Write-Host "---------------------------------------------------------------------"
          nuget restore -verbosity quiet

          Write-Host ""
          Write-Host "---------------------------------------------------------------------"
          Write-Host "msbuild /clp:ErrorsOnly"
          Write-Host "---------------------------------------------------------------------"
          msbuild /clp:ErrorsOnly

          Write-Host ""
          Write-Host "---------------------------------------------------------------------"
          Write-Host "Finding test assemblies and running tests"
          Write-Host "---------------------------------------------------------------------"
          $testAssemblies = Get-ChildItem -Recurse -Filter *.dll | Where-Object { $_.Name -match 'Test' -and $_.FullName -match 'bin\\Debug\\' }

          $testAssemblies | ForEach-Object -Parallel {
              $assembly = $_
              $assemblyName = [System.IO.Path]::GetFileNameWithoutExtension($assembly.FullName)
              $trxFileName = "TestResults_$($assemblyName)_$(Get-Date -Format 'yyyyMMddHHmmss').trx"

              Write-Host ""
              Write-Host "---------------------------------------------------------------------"
              Write-Host "Running dotnet test for $($assembly.FullName)"
              Write-Host "---------------------------------------------------------------------"
              
              $output = dotnet test $assembly.FullName --logger "trx;LogFileName=$trxFileName" --results-directory artifacts --verbosity minimal 2>&1
              
              if ($LASTEXITCODE -ne 0) {
                  if ($output -match "No test source files were specified") {
                      Write-Host "No tests found in $assemblyName. Skipping."
                  } else {
                      Write-Host "Tests failed for $assemblyName with exit code $LASTEXITCODE"
                      Write-Host $output
                      $Global:TestsFailed = $true
                  }
              } else {
                  Write-Host "Tests passed for $assemblyName"
              }
          } -ThrottleLimit 4

          if ($Global:TestsFailed) {
              exit 1
          } else {
              exit 0
          }

      - name: Publish Test Results (.NET Framework)
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        if: ${{ always() && inputs.dotnet-framework-version }}
        with:
          comment_mode: off
          files: |
            artifacts/*.trx
          job_summary: true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: artifacts/*.trx


